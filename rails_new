#!/usr/bin/env ruby
require 'optparse'

def create_rails_app(version, flag = nil)
  run "gem install rails -v #{version} --no-document"
  run rails_new(version, flag)
  run 'echo config/credentials.yml.enc >> .gitignore'
  run 'git add .'
  run "git -c commit.gpgsign=false commit -m '`#{rails_new(version, flag)}`'"
  run "git tag --no-sign #{branch(version, flag)}"
  run 'git reset HEAD^'
ensure
  # 2ÂõûÂÆüË°å„Åó„Å™„ÅÑ„Å® config/, log/, node_modules/, tmp/ „ÅåÂâäÈô§„Åï„Çå„Å™„ÅÑ„Åü„ÇÅ
  run 'git clean -fd'
  run 'git clean -fd'
end

def rails_new(version, flag)
  return "rails _#{version}_ new . --#{flag}" if flag

  "rails _#{version}_ new ."
end

def run(command)
  lcyan = "\e[1;36m"
  nocolor = "\e[0m"

  puts "#{lcyan}> #{command}#{nocolor}"

  # -- for debugging
  # print 'press any key to continue...'
  # $stdin.getc
  ret = system(command)
  raise "command failed: #{command}" unless ret
end


def filtered_versions_flags(target)
  versions_flags = {
    '6.1.7.8' => %w[
      skip-action-mailer
      skip-action-mailbox
      skip-action-text
      skip-active-record
      skip-active-job
      skip-active-storage
      skip-puma
      skip-action-cable
      skip-sprockets
      skip-spring
      skip-listen
      skip-javascript
      skip-turbolinks
      skip-jbuilder
      skip-test
      skip-system-test
      skip-bootsnap
      api
      minimal
      webpacker
    ],
    '7.0.8.4' => %w[
      skip-action-cable
      skip-action-mailbox
      skip-action-mailer
      skip-action-text
      skip-active-job
      skip-active-record
      skip-active-storage
      skip-asset-pipeline
      skip-bootsnap
      skip-hotwire
      skip-javascript
      skip-jbuilder
      skip-system-test
      skip-test
      skip-sprockets
      skip-propshaft
      asset-pipeline=propshaft
      asset-pipeline=sprockets
      css=bootstrap
      css=bulma
      css=postcss
      css=sass
      css=tailwind
      javascript=esbuild
      javascript=importmap
      javascript=rollup
      javascript=webpack
      api
      minimal
    ],
    '7.1.4' => %w[
      skip-action-cable
      skip-action-mailbox
      skip-action-mailer
      skip-action-text
      skip-active-job
      skip-active-record
      skip-active-storage
      skip-asset-pipeline
      skip-bootsnap
      skip-dev-gems
      skip-hotwire
      skip-javascript
      skip-jbuilder
      skip-system-test
      skip-test
      skip-sprockets
      skip-propshaft
      skip-docker
      skip-git
      asset-pipeline=propshaft
      asset-pipeline=sprockets
      css=bootstrap
      css=bulma
      css=postcss
      css=sass
      css=tailwind
      javascript=bun
      javascript=esbuild
      javascript=importmap
      javascript=rollup
      javascript=webpack
      api
      minimal
    ],
    '7.2.1' => %w[
      skip-action-cable
      skip-action-mailbox
      skip-action-mailer
      skip-action-text
      skip-active-job
      skip-active-record
      skip-active-storage
      skip-asset-pipeline
      skip-bootsnap
      skip-dev-gems
      skip-hotwire
      skip-javascript
      skip-jbuilder
      skip-system-test
      skip-test
      skip-sprockets
      skip-propshaft
      skip-docker
      skip-git
      skip-rubocop
      skip-breakeman
      skip-ci
      skip-devcontainer
      asset-pipeline=propshaft
      asset-pipeline=sprockets
      css=bootstrap
      css=bulma
      css=postcss
      css=sass
      css=tailwind
      javascript=bun
      javascript=esbuild
      javascript=importmap
      javascript=rollup
      javascript=webpack
      api
      minimal
    ]
  }
  return versions_flags if target == 'all'

  versions_flags.select { |k, _| k.start_with?(target) }
end

def branch(version, flag = nil)
  return [version, flag.gsub('=', '-')].compact.join('-') if flag

  version
end

target = 'all'

opt = OptionParser.new

opt.on('-t', '--target [TARGET]') do |t|
  target = t
end

opt.parse!(ARGV)
sub_command = ARGV.shift

case sub_command
when 'create'
  filtered_versions_flags(target).each do |v, flags|
    create_rails_app(v)
    flags.each do |f|
      create_rails_app(v, f)
    end
  end
when 'destroy'
  filtered_versions_flags(target).each do |v, flags|
    system "git tag -d #{branch(v)}"
    flags.each do |f|
      system "git tag -d #{branch(v, f)}"
    end
  end
when 'readme'
  repository = 'snaka/rails_new_flags'

  summary = {}
  filtered_versions_flags('all').each do |v, flags|
    flags.each do |f|
      summary[f] ||= {}
      summary[f][v] = "https://github.com/#{repository}/compare/#{branch(v)}..#{branch(v, f)}"
    end
  end

  versions = filtered_versions_flags('all').keys.sort
  flags = filtered_versions_flags('all').values.flatten.uniq.sort

  puts '| flag |' << versions.map { |v| " #{v} " }.join('|') << '|'
  puts '| --- |' << versions.count.times.map { ' --- ' }.join('|') << '|'

  diff_url = ->(url) { url ? " [üîç](#{url}) " : ' - ' }

  flags.each do |f|
    puts "| --#{f} |" << versions.map { |v| diff_url.call(summary.dig(f, v)) }.join('|') << '|'
  end
else
  puts "Usage: #{$0} [create|destroy|readme]"
end
